Score : P | Difficulty : Easy
Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.

Note:
You may assume that both strings contain only lowercase letters.

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true

M's Answer :
M's Solution :
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        HashMap<Character, Integer> map1 = new HashMap<>();
        HashMap<Character, Integer> map2 = new HashMap<>();
        for(int i = 0; i < ransomNote.length(); i++){
            if(!map1.containsKey(ransomNote.charAt(i))){
                map1.put(ransomNote.charAt(i), 1);
            }
            else{
                map1.replace(ransomNote.charAt(i), map1.get(ransomNote.charAt(i)) + 1);
            }
        }
        for(int i = 0; i < magazine.length(); i++){
            if(!map2.containsKey(magazine.charAt(i))){
                map2.put(magazine.charAt(i), 1);
            }
            else{
                map2.replace(magazine.charAt(i), map2.get(magazine.charAt(i)) + 1);
            }
        }
        for(int i = 0; i < ransomNote.length(); i++){
            if(!map2.containsKey(ransomNote.charAt(i)) || map1.get(ransomNote.charAt(i)) > map2.get(ransomNote.charAt(i))){
                return false;
            }
        }
        return true;
    }
}

M's Answer with J help:
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        HashMap<Character, Integer> map1 = new HashMap<>();
        HashMap<Character, Integer> map2 = new HashMap<>();
        
        for(char character : ransomNote.toCharArray()){
            if(map1.containsKey(character)){
                map1.replace(character, map1.get(character) + 1);
            }
            else{
                map1.put(character, 1);
            }
        }
        for(char character : magazine.toCharArray()){
            if(map2.containsKey(character)){
                map2.replace(character, map2.get(character) + 1);
            }
            else{
                map2.put(character, 1);
            }
        }
        for(char character : ransomNote.toCharArray()){
            if(map2.get(character) == null){return false;}
            if((int)map1.get(character) > (int)map2.get(character)){
                return false;
            }
        }
        return true;
    }
}

J solution:
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        HashMap<Character, Integer> map1 = new HashMap<Character, Integer>();
        HashMap<Character, Integer> map2 = new HashMap<Character, Integer>();
        for(int i = 0; i < ransomNote.length(); i++){
            if(map1.containsKey(ransomNote.charAt(i))){
                map1.replace(ransomNote.charAt(i), map1.get(ransomNote.charAt(i)) + 1);
            } else {
                map1.put(ransomNote.charAt(i), 1);
            }
        }
        for(int i = 0; i < magazine.length(); i++){
            if(map2.containsKey(magazine.charAt(i))){
                map2.replace(magazine.charAt(i), map2.get(magazine.charAt(i)) + 1);
            } else {
                map2.put(magazine.charAt(i), 1);
            }
        }   

        for(int i = 0; i < ransomNote.length(); i++){
            if(map2.containsKey(ransomNote.charAt(i))){             
                if(map1.get(ransomNote.charAt(i)) > map2.get(ransomNote.charAt(i))){
                    return false;
                }
            } else {
                
                return false;
            }
        }
        return true;
    }
}
