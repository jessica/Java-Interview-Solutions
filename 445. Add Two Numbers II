You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
 

Follow up: Could you solve it without reversing the input lists?

M's answer :
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int size1 = 0, size2 = 0, carry = 0, total = 0;
        Stack<ListNode> stack1 = new Stack<ListNode>();
        Stack<ListNode> stack2 = new Stack<ListNode>();
        Stack<ListNode> stack3 = new Stack<ListNode>();
        ListNode answer = new ListNode();
        ListNode answerHead = answer;
        while(l1 != null){
            size1++;
            stack1.push(l1);
            l1 = l1.next;
        }
        while(l2 != null){
            size2++;
            stack2.push(l2);
            l2 = l2.next;
        }
        while(size1 != 0 || size2 != 0){
            if(size2 == 0){
                total = stack1.pop().val + carry;
                if(total < 10){
                    stack3.push(new ListNode(total));
                    carry = 0;
                }
                else{
                    carry = 1;
                    stack3.push(new ListNode(total % 10));
                }
                size1--;
            }
            else if(size1 == 0){
                total = stack2.pop().val + carry;
                if(total < 10){
                    stack3.push(new ListNode(total));
                    carry = 0;
                }
                else{
                    carry = 1;
                    stack3.push(new ListNode(total % 10));
                }
                size2--;
            }
            else{
                total = stack1.pop().val + stack2.pop().val + carry;
                if(total < 10){
                    stack3.push(new ListNode(total));
                    carry = 0;
                }
                else{
                    carry = 1;
                    stack3.push(new ListNode(total % 10));
                }
                size1--;
                size2--;
            }
        }
        if(carry == 1){
            stack3.push(new ListNode(1));
        }
        while(!stack3.isEmpty()){
            answer.next = stack3.pop();
            answer = answer.next;
        }
        return answerHead.next;
    }
}
